<nav class="navbar-nav navbar-default">
  <% if user_signed_in? %>
  <li class="dropdown">
    <a href="#" class="dropdown-toggle" data-toggle="dropdown">
      <span class="glyphicon glyphicon-globe"></span>
    </a>
    <ul class="dropdown-menu" role="menu">
      <% if @messages.any? %>
        <% @messages.each do |msg| %>
      <li class="drop-links"> <%= link_to 'you received a message from ' + User.find(msg.sender_id).username, conversation_path(msg.conversation_id), remote: true %></li>
        <% end %>
        <% else  %>
      <li class="drop-links"><p id="no-messages" style="margin-right:20px;">No new messages</p></li>
      <% end %>
    </ul>
  </li>

  <ul>
    <li>signed in as <%= current_user.email %></li>
    <li> <%= link_to 'Sign out', destroy_user_session_path, method: :delete %></li>
    <li> <%= link_to 'Account', edit_user_registration_path %></li>
    <% else %>
    <li> <%= link_to 'Sign In', new_user_session_path %></li>
    <li> <%= link_to 'Sign up', new_user_registration_path %></li>
    <% end %>
  </ul>
</nav>

<div class="chat-sidebar">
  <% @users.each do |user| %>
  <div class="sidebar-name">
    <td><p class="username"> <%= user.username %></p></td>
    <% if user_signed_in? %>
    <td> <%= link_to 'Message', new_conversation_path(:recipient_id => user.id, :sender_id => current_user.id), remote: true, :class => 'btn btn-primary' %></td>
    <% end %>
  </div>
  <% end %>
</div>

<div class="well container col-md-8">
  <h1>Directions</h1>
  <p>Log in as email: example@gmail.com and password: password, </p>
  <p>or example2@gmail.com and password: password.</p>
  <p>Leave comments or questions below, and enjoy!</p>
</div>



    <table class="table table-striped table-bordered">
      <tbody>
        <% @posts.each do |post| %>
        <tr>
          <td class="post-content"><%= post.body %></td>
          <td class="message-sm"> <%= post.created_at.strftime("%d %b. %Y, %H:%M") %></td>
          <td class="message-sm"> <%= post.user.username %></td>
        </tr>
        <% end %>
      </tbody>
    </table>

<% if user_signed_in? %>
  <div class="container input-box">
    <%= form_for @post, remote: true do |f| %>
    <div class="field">
      <%= f.text_area :body, :class => 'text-field body-text', placeholder: 'type a message here' %>
    </div>
    <div class="actions">
      <%= f.submit 'Send', :class => 'btn btn-primary post-submit' %>
    </div>
    <%= f.hidden_field :user_id, :value => current_user.id %>
    <% end %>
  </div>
  </div>
  <% end %>

<% if user_signed_in? %>
<% if @messages.any?%>
<script>
  $('.glyphicon-globe').addClass('pulsit');
</script>
<% end %>
<% end %>




<script>
    //this function can remove a array element.
    Array.remove = function(array, from, to) {
        var rest = array.slice((to || from) + 1 || array.length);
        array.length = from < 0 ? array.length + from : from;
        return array.push.apply(array, rest);
    };

    //this variable represents the total number of popups can be displayed according to the viewport width
    var total_popups = 0;

    //arrays of popups ids
    var popups = [];

    //this is used to close a popup
    function close_popup(id)
    {
        for(var iii = 0; iii < popups.length; iii++)
        {
            if(id == popups[iii])
            {
                Array.remove(popups, iii);

                document.getElementById(id).style.display = "none";

                calculate_popups();

                return;
            }
        }
    }

    //displays the popups. Displays based on the maximum number of popups that can be displayed on the current viewport width
    function display_popups()
    {
        var right = 220;

        var iii = 0;
        for(iii; iii < total_popups; iii++)
        {
            if(popups[iii] != undefined)
            {
                var element = document.getElementById(popups[iii]);
                element.style.right = right + "px";
                right = right + 320;
                element.style.display = "block";
            }
        }

        for(var jjj = iii; jjj < popups.length; jjj++)
        {
            var element = document.getElementById(popups[jjj]);
            element.style.display = "none";
        }
    }

    //creates markup for a new popup. Adds the id to popups array.
    function register_popup(id, name)
    {

        for(var iii = 0; iii < popups.length; iii++)
        {
            //already registered. Bring it to front.
            if(id == popups[iii])
            {
                Array.remove(popups, iii);

                popups.unshift(id);

                calculate_popups();


                return;
            }
        }

        var element = '<div class="popup-box chat-popup" id="'+ id +'">';
        element = element + '<div class="popup-head">';
        element = element + '<div class="popup-head-left">'+ name +'</div>';
        element = element + '<div class="popup-head-right"><a href="javascript:close_popup(\''+ id +'\');">&#10005;</a></div>';
        element = element + '<div style="clear: both"></div></div><div class="popup-messages"></div></div>';

        document.getElementsByTagName("body")[0].innerHTML = document.getElementsByTagName("body")[0].innerHTML + element;

        popups.unshift(id);

        calculate_popups();

    }

    //calculate the total number of popups suitable and then populate the toatal_popups variable.
    function calculate_popups()
    {
        var width = window.innerWidth;
        if(width < 540)
        {
            total_popups = 0;
        }
        else
        {
            width = width - 200;
            //320 is width of a single popup box
            total_popups = parseInt(width/320);
        }

        display_popups();

    }

    //recalculate when window is loaded and also when window is resized.
    window.addEventListener("resize", calculate_popups);
    window.addEventListener("load", calculate_popups);
</script>

<script>
$(function() {
  var pusher = new Pusher('f74ddd7f3eae987007b6');
  var channelName = 'private-conversation.' + '<%= current_user ? current_user.id.to_s : 'null' %>';
  var channel = pusher.subscribe(channelName);

  channel.bind('new_message', function(data) {
    console.log(data.conversation_id)
    console.log(data.message)
    console.log(data.from)
    console.log(data.create_time)
  if ($('#' + data.conversation_id).css('display') === 'block') {
    $('#' + data.conversation_id).children('.popup-messages').children('.message-content').append('<div class="message-wrapper"><div class="left"></div><p class="message-text">' + data.message + '</p></div>');
    $('#' + data.conversation_id).children('.popup-messages').children('.message-content').scrollTop($('#' + data.conversation_id).children('.popup-messages').children('.message-content').prop("scrollHeight") - 210);
  }
  else {
    // make icon pulse and prepend link //
    $('.glyphicon').addClass('pulsit');
    $('.dropdown-menu').append('<li class="drop-links"><a data-remote="true" href="/conversations/' + data.conversation_id + '">you received a message from ' + data.from + '</a></li>');
  }
  });
})

</script>
